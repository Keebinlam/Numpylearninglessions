pip3 install Numpy


Numpy is a core base for many other library like Pandas
Numpy is a multi-dimensional array library, meaning it can store data in 1, 2 3... dimensional

Why use Numpy over list? 
-The main difference is speed. Numpy is much faster. A reason is it faster is because Numpy uses fixed types.
-Numpy reads information in binary, while list uses a built in int type, which has multple meta information inside it.
-With list having, size, reference count, object type, the complete binary makeup in a list is much larger than in Numpy
-Since numpy uses less bytes, it reads faster 
-Also in list, it is checking type each time while numpy does not do type check. 
-Numpy uses contiguous memory, meaning data blocks is right next to each other. So quicker access to cache

How are list different than Numpy?
-List you can use insertion, deletion, appending, concaenation
-numpym can also insertion, deletion, appending, concaenation, except it can it across the array

Application of Numpy
-Matlab replacement (math)
- plotting (matplotlib)
- backend (pandas, connect 4, digital photography)
- Machine Learning

How to get Numpy dimensions?
variable.ndim
example: a = [[1,2,3,4],[5,6,7,8]]
a.ndim
=2

How to get shape
variable.shape
example: a = [[1,2,3,4],[5,6,7,8]]
a.shape
=(2, 4)

How to get type
variable.dtype
example: a = [[1,2,3,4],[5,6,7,8]]
a.dtype
=int 32

How to get size
variable.dsize
example: a = [[1,2,3,4],[5,6,7,8]]
a.dsize


How to get total size
variable.nbytes
example: a = [[1,2,3,4],[5,6,7,8]]
a.size *a.itemsize for a.nbytes
=16

How to access/change specific elemtsnts, rows, columns, etc
Getting specific elements ['row', 'columns']
example a = [[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]] (2,7)
a[1,5] = 13 #row count starts at 0, so the second row in this case is 1

Getting a specific row
a[0, :] = [1,2,3,4,5,6,7]

Getting a specific columns
a[:, 1] = [2,9]

[Startindex:endindex,stepsize]
a[0, 1:6:2] = [2,4,6]

Changing elements
a[1:5] = 20 #changing the 13 or position a[1:5] to 20
a = [[1,2,3,4,5,6,7],[8,9,10,11,12,20,14]]

Work outside in to get speific elements in larger arrays
When replacing values in the array, make sure it formated in the same dimensions. ie changing a 2,7 array. if you want to change the whole second row, you will need 7 elements

How to initialize different types of arrays
-All 0s matrix
np.zeros()
example np.zeros(3,3) = [0,0,0]
                        [0,0,0]
                        [0,0,0]

-All 1s ,matrix
np.ones(2,3) = [1.1,1][1,1,1]
You can also include datatypes 
np.ones((2,3), dtype='int32')

-For any other number initialization
np.full(2,2), 'value'

-reusing a previous matrix
no.full_like('using a varible from before', 'value')

-random decimal numbers
np.random.rand('pass in shape' ie 2,4)

-random interger values
np.random.randint(10 'meaning 1-10', size=2,3))

-the identity matrix
np.identity(2) = 2 by 2
np.identity(5) = 5 by 5 
It is squared

-repeating arrays and making sure it meets in the 0 axis
arr = np.array([[1,2,3]])
r1 = no.repeat(arr,3,axis 0) (repeat the arr array, 3 times, starting at the 0 position)
[1,2,3]
[1,2,3]
[1,2,3]

-how to remake this array
[1,1,1,1,1]
[1,0,0,0,1]
[1,0,9,0,1]
[1,0,0,0,1]
[1,1,1,1,1]

output = np.ones(5,5)
[1,1,1,1,1]
[1,1,1,1,1]
[1,1,1,1,1]
[1,1,1,1,1]
[1,1,1,1,1]

then make the inner ring 0

output2 = np.zeros(3,3)
[0,0,0]
[0,0,0]
[0,0,0]

make the middle of the output2 array have a 9
output2[1,1] = 9
[0,0,0]
[0,9,0]
[0,0,0]

change the the area where output 2 should be in, then filling it with output2
output[1:-1,1:-1] = output2
[1,1,1,1,1]
[1,0,0,0,1]
[1,0,9,0,1]
[1,0,0,0,1]
[1,1,1,1,1]

user 'varible.copy to make a new copy of the same array

Mathematics
You can do arythematics on elements within an array
example a = [1,2,3,4]
a + 2 = [3,4,5,6]

you can run math operations like you would in python

np.matmul(a,b)
multpltiplying the elements of row 1 and column 1

Statistics
using min, max, mode
to add specific rows use 'axis 1' or 2... 

Sum will add all the elements in the matrix

reorganizing arrays
before = np.array([[1,2,3,4][5,6,7,8]]) **(2,4)
after = before.reshape(8,1)
[[1]
[2]
[3]
[4]
[5]
[6]
[7]
[8]]


vertically stacking vectors
a=(4,5,6)
b=(1,2,3)
np.vstack(a,b) = 
[[4,5,6]
[1,2,3]]

can you make multiple copies of the same stack is by adding the array to the vstack, meaning it repeats

works the same for hstack, but hotizontal orientation

Miscellaneous
Load Data from file, 
np.genfromtxt('file name') delimiter = ",") 
delimiter is what the values are seperated by
.astype('int32) ** changes the varible to a new type 

Advanced indexing
Boolean masking and advanced indexing
*where in file is value greater than for example 50?

filedata = [1,2,51,3,52]
filedata > 50 
[false false, true, False, true]
it will show in the specific location is true or false

you can index in the same file, where the value is greater than 50
filedata[filedata >50]
array[51,52]
it only grabs data when it is larger than 50 and puts in in the varible 

You can index wth a list in numpy
a = np.array[a,2,3,4,5,6,7,8,9,]
a[[1,2,8]]
array([2,3,9])

can cut even further
np.any(filedata >50, axis=0)
**show me in the filedata array where the value is over 50, and it on the first 1 (axis = 0)

use '&' to add parameters when looking for value like in regular python, like larger than 50, but small than 100 

